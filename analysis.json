{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`flow-bind`\n\nCustom element to allow using Polymer's template features (Flowbased Polymer,  data binding,\ndeclarative event listeners, etc.) in the main document without defining\na new custom element.\n\n`<template>` tags utilizing bindings may be wrapped with the `<flow-bind>`\nelement, which will immediately stamp the wrapped template into the main\ndocument, attach the declarative @-events, ƒ-functions and bind elements to the `flow-bind` element itself as the\nbinding scope.",
      "summary": "Custom element to allow using Flowbased-Polymer's template features (data\n  binding, declarative event listeners, etc.) in the main document.",
      "path": "flow-bind.js",
      "properties": [],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 22,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/flow-bind.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 21,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "FlowBind",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "flow-bind",
      "mixins": [
        "FBP"
      ]
    }
  ],
  "mixins": [
    {
      "description": "flowbased-polymer\n\nThe flowbased-polymer mixin offers you the possibility to **write your components or apps fully declaratively**. No more manual/imperative adding of eventlisteners in the source code and no more assignment of IDs to access the component you want.\n\nYou can use it to simply save adding eventlisteners in your source or to write entire components and applications according to the FBP programming paradigm without using a single line of JS. It's up to you how far you want to go.\n\nFBP code is also easy testable. It takes about 2 minutes to understand the main concept.\n\nIt is a hybrid form of flow-based programming and ordinary polymer and works with every component which is useable by polymer.\n\n## Simple Introduction\nIn short, FBP combines events from one component `@-event` with methods from another component `ƒ-method` to trigger them. We call the connection a **wire**.\n\n ```\n<paper-button raised @-click=\"--btnPropsClicked\">Show Props</paper-button>\n<left-drawer ƒ-hide=\"--btnPropsClicked\">Menu...</left-drawer>\n<right-drawer ƒ-show=\"--btnPropsClicked\">Props...</right-drawer>\n```\n\n![simple intro](https://veith.github.io/flowbased-polymer/images/short-intro.png)\n\n\n### What happens in the example above\nWhen the user clicks on the `paper-button`, the `left-drawer` is hidden and the `right-drawer` is displayed.\nThe button does not need to know that there is a left-drawer or right-drawer. It only informs about the wire `--btnPropsClicked` that it was clicked.\n\n## Further documentation\nPlease read the [documentation page](https://veith.github.io/flowbased-polymer/wireing/overview/) for more information.\n\n\n## Detailed documentation\nRead more about FBPolymer on the  [documentation pages](https://veith.github.io/flowbased-polymer/).\n\n\n## License\n\nMIT",
      "summary": "",
      "path": "fbp-mixin.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 289,
          "column": 7
        },
        "end": {
          "line": 289,
          "column": 43
        }
      },
      "privacy": "public",
      "name": "FBP",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ],
  "classes": [
    {
      "description": "",
      "summary": "",
      "path": "fbp-mixin.js",
      "properties": [],
      "methods": [
        {
          "name": "_attachDom",
          "description": "für Polymer",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 17,
              "column": 8
            },
            "end": {
              "line": 20,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_FBPTriggerWire",
          "description": "Triggers a wire",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 8
            },
            "end": {
              "line": 55,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "wire",
              "description": "(String) Name of the wire like --buttonClicked"
            },
            {
              "name": "detailData",
              "description": "(*) data to pass"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_FBPAddWireHook",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 82,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "wire",
              "description": "(String) Name of the wire"
            },
            {
              "name": "cb",
              "description": "(function) Callback function cb(detailData)"
            },
            {
              "name": "before"
            }
          ]
        },
        {
          "name": "_appendFBP",
          "description": "parses the dom for flowbased programming tags",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 8
            },
            "end": {
              "line": 233,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "description": "dom node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 235,
              "column": 8
            },
            "end": {
              "line": 241,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 8,
          "column": 11
        },
        "end": {
          "line": 242,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "superClass"
    }
  ]
}
